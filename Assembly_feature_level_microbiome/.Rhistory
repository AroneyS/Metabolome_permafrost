getwd()
### Load in necessary libraries
require(Rfast) # For faster variant of finding column minimum
require(dplyr) # For left joining
library(picante) # For match.phylo.data
require(phytools) # For midpoint.root
library(tidyverse)
tree <- read.tree('input/bac_arc_tree_comb.tree')
meta <-  read_csv("input/metadata_matched_MAGs_data.csv") %>%
select(c(SampleID, Month, Habitat, Core, Depth, Year, Sampletype, names_bnti)) %>%
rename(SampleID_1 = names_bnti)
data <- read_csv('input/otu_normalized.csv') %>%
rename(!!(set_names(meta$SampleID_1, meta$SampleID))) %>%
select(!c(Domain, Phylum, Class, Order, Family, Genus, Species)) %>%
pivot_longer(!genome, names_to = 'SampleID', values_to = 'abundance') %>%
pivot_wider(names_from = 'genome', values_from = 'abundance') %>%
column_to_rownames(var = 'SampleID')
data <- read_csv('input/otu_normalized.csv') %>%
rename(!!(set_names(meta$SampleID_1, meta$SampleID))) %>%
select(!c(Domain, Phylum, Class, Order, Family, Genus, Species)) %>%
pivot_longer(!genome, names_to = 'SampleID', values_to = 'abundance') %>%
pivot_wider(names_from = 'genome', values_from = 'abundance') %>%
column_to_rownames(var = 'SampleID')
View(data)
# If not abundance weighted, setting data to presence/absence
if(abund.weig == F){
data[data > 0] = 1
}
meta_palsa <- meta %>%
filter(Habitat == "Palsa")
otu_palsa <- data[rownames(data) %in% meta_palsa$SampleID,]
otu_palsa <- otu_palsa[, colSums(otu_palsa) > 0]
data <- otu_palsa
meta <- meta_palsa
check_df <- data.frame(data = rownames(data), meta$SampleID)
head(check_df)
### Matching data and rooting tree
# tree = midpoint.root(tree) # Rooting the tree for consistent results
phylo = match.phylo.data(tree, t(data)) # Matching ICR dataset to the tree
View(data)
### Matching data and rooting tree
# tree = midpoint.root(tree) # Rooting the tree for consistent results
phylo = match.phylo.data(tree, t(data)) # Matching ICR dataset to the tree
data = t(phylo$data)
# Switches for script behaviors
rm.conspec = F # Remove conspecifics
abund.weig = T # Weight values by relative abundances
noise = T # This adds "noise" to the nulls to ensure 0's don't exist in the null
range = 1:999 # Setting replicate numbers (I don't recommend more than 99 at the moment, time-consuming)
### Load in necessary libraries
require(Rfast) # For faster variant of finding column minimum
require(dplyr) # For left joining
library(picante) # For match.phylo.data
require(phytools) # For midpoint.root
library(tidyverse)
print(date())
tree <- read.tree('input/bac_arc_tree_comb.tree')
meta <-  read_csv("input/metadata_matched_MAGs_data.csv") %>%
select(c(SampleID, Month, Habitat, Core, Depth, Year, Sampletype, names_bnti)) %>%
rename(SampleID_1 = names_bnti)
View(meta)
data <- read_csv('input/otu_normalized.csv') %>%
rename(!!(set_names(meta$SampleID_1, meta$SampleID))) %>%
select(!c(Domain, Phylum, Class, Order, Family, Genus, Species)) %>%
pivot_longer(!genome, names_to = 'SampleID', values_to = 'abundance') %>%
pivot_wider(names_from = 'genome', values_from = 'abundance') %>%
column_to_rownames(var = 'SampleID')
View(data)
meta_palsa <- meta %>%
filter(Habitat == "Palsa")
otu_palsa <- data[rownames(data) %in% meta_palsa$SampleID,]
otu_palsa <- otu_palsa[, colSums(otu_palsa) > 0]
data <- otu_palsa
meta <- meta_palsa
check_df <- data.frame(data = rownames(data), meta$SampleID)
head(check_df)
### Matching data and rooting tree
# tree = midpoint.root(tree) # Rooting the tree for consistent results
phylo = match.phylo.data(tree, t(data)) # Matching ICR dataset to the tree
### Matching data and rooting tree
tree = midpoint.root(tree) # Rooting the tree for consistent results
phylo = match.phylo.data(tree, t(data)) # Matching ICR dataset to the tree
?match.phylo.data
### Matching data and rooting tree
#tree = midpoint.root(tree) # Rooting the tree for consistent results
phylo = match.phylo.data(tree, t(data)) # Matching ICR dataset to the tree
data = t(phylo$data)
View(otu_palsa)
data <- as.data.frame(otu_palsa)
meta <- meta_palsa
### Matching data and rooting tree
#tree = midpoint.root(tree) # Rooting the tree for consistent results
phylo = match.phylo.data(tree, t(data)) # Matching ICR dataset to the tree
data <- as.data.frame(otu_palsa)
check_df <- data.frame(data = rownames(data), meta$SampleID)
head(check_df)
otu_palsa <- data[rownames(data) %in% meta_palsa$SampleID,]
otu_palsa <- otu_palsa[, colSums(otu_palsa) > 0]
data <- otu_palsa
### Matching data and rooting tree
#tree = midpoint.root(tree) # Rooting the tree for consistent results
phylo = match.phylo.data(tree, t(data)) # Matching ICR dataset to the tree
str(t(data))
### Matching data and rooting tree
#tree = midpoint.root(tree) # Rooting the tree for consistent results
phylo = match.phylo.data(tree, as.data.frame(t(data))) # Matching ICR dataset to the tree
data = t(phylo$data)
tree = phylo$phy
