names(matrix_list) <- c('soil_t', 'depth', 'C:N_ratio',
'precipitation', 'microbial_bNTI')
mantel_stats <- tibble(Geochemistry = character(), Mantel_stat = numeric(), p_value = numeric(), pval.adj = numeric(), .rows = 0)
for(i in 1:length(matrix_list)){
mat <- as.data.frame(matrix_list[i])
colnames(mat) <- str_remove(colnames(mat), '.*\\.')
mantel_result <- mantel_fun(weig, mat)
temp <- tibble(Geochemistry = names(matrix_list)[i], Mantel_stat = mantel_result$statistic,
p_value = mantel_result$signif)
mantel_stats <- rbind(mantel_stats, temp)
}
mantel_stats$pval.adj <- p.adjust(mantel_stats$p_value, method = 'bonferroni')
mantel_stats_fen_all <- mantel_stats %>%
mutate(Type = 'Bulk')
#Filtering Palsa data
geo_Palsa <- geo %>%
filter(str_detect(SampleID, "P"))
sel_columns <- c('T_soil', 'DepthAvg',
'CtoN_wt', 'Precipitation_3day_accumulation_mm', 'bacteria')
matrix_list <- map(sel_columns, function(x){
if(x == 'bacteria'){
mat <- bacteria_r[rownames(bacteria_r) %in% geo_Palsa$SampleID,
colnames(bacteria_r) %in% geo_Palsa$SampleID,]
} else {
mat <- distance_func(weig, geo_Palsa, x)
}
return(mat)
})
names(matrix_list) <- c('soil_t', 'depth', 'C:N_ratio',
'precipitation', 'microbial_bNTI')
mantel_stats <- tibble(Geochemistry = character(), Mantel_stat = numeric(), p_value = numeric(), pval.adj = numeric(), .rows = 0)
for(i in 1:length(matrix_list)){
mat <- as.data.frame(matrix_list[i])
colnames(mat) <- str_remove(colnames(mat), '.*\\.')
mantel_result <- mantel_fun(weig, mat)
temp <- tibble(Geochemistry = names(matrix_list)[i], Mantel_stat = mantel_result$statistic,
p_value = mantel_result$signif)
mantel_stats <- rbind(mantel_stats, temp)
}
mantel_stats$pval.adj <- p.adjust(mantel_stats$p_value, method = 'bonferroni')
mantel_stats_Palsa_all <- mantel_stats %>%
mutate(Type = 'Bulk')
#Filtering Palsa data
geo_Palsa <- geo %>%
filter(str_detect(SampleID, "P"))
sel_columns <- c('T_soil', 'DepthAvg',
'CtoN_wt', 'Precipitation_3day_accumulation_mm')
matrix_list <- map(sel_columns, function(x){
if(x == 'bacteria'){
mat <- bacteria_r[rownames(bacteria_r) %in% geo_Palsa$SampleID,
colnames(bacteria_r) %in% geo_Palsa$SampleID,]
} else {
mat <- distance_func(bacteria_r, geo_Palsa, x)
}
return(mat)
})
names(matrix_list) <- c('soil_t', 'depth', 'C:N_ratio',
'precipitation')
mantel_stats <- tibble(Geochemistry = character(), Mantel_stat = numeric(), p_value = numeric(), pval.adj = numeric(), .rows = 0)
for(i in 1:length(matrix_list)){
mat <- as.data.frame(matrix_list[i])
colnames(mat) <- str_remove(colnames(mat), '.*\\.')
mantel_result <- mantel_fun(bacteria_r, mat)
temp <- tibble(Geochemistry = names(matrix_list)[i], Mantel_stat = mantel_result$statistic,
p_value = mantel_result$signif)
mantel_stats <- rbind(mantel_stats, temp)
}
mantel_stats$pval.adj <- p.adjust(mantel_stats$p_value, method = 'bonferroni')
data_plot_Palsa_bacteria <- mantel_stats %>%
mutate(Habitat = 'Palsa',
Type = 'Microbial \u03B2NTI')
#Filtering Bog
geo_bog <- geo %>%
filter(str_detect(SampleID, "[a-z]_S"))
sel_columns <- c('T_soil', 'DepthAvg',
'CtoN_wt', 'Precipitation_3day_accumulation_mm')
matrix_list <- map(sel_columns, function(x){
if(x == 'bacteria'){
mat <- bacteria_r[rownames(bacteria_r) %in% geo_$SampbogleID,
colnames(bacteria_r) %in% geo_bog$SampleID,]
} else {
mat <- distance_func(bacteria_r, geo_bog, x)
}
return(mat)
})
names(matrix_list) <- c('soil_t', 'depth','C:N_ratio',
'precipitation')
mantel_stats <- tibble(Geochemistry = character(), Mantel_stat = numeric(), p_value = numeric(), pval.adj = numeric(), .rows = 0)
for(i in 1:length(matrix_list)){
mat <- as.data.frame(matrix_list[i])
colnames(mat) <- str_remove(colnames(mat), '.*\\.')
mantel_result <- mantel_fun(bacteria_r, mat)
temp <- tibble(Geochemistry = names(matrix_list)[i], Mantel_stat = mantel_result$statistic,
p_value = mantel_result$signif)
mantel_stats <- rbind(mantel_stats, temp)
}
mantel_stats$pval.adj <- p.adjust(mantel_stats$p_value, method = 'bonferroni')
data_plot_Bog_bacteria <- mantel_stats %>%
mutate(Habitat = 'Bog',
Type = 'Microbial \u03B2NTI')
#Filtering fen data
geo_Fen <- geo %>%
filter(str_detect(SampleID, "E"))
sel_columns <- c('T_soil', 'DepthAvg',
'CtoN_wt', 'Precipitation_3day_accumulation_mm')
matrix_list <- map(sel_columns, function(x){
if(x == 'bacteria'){
mat <- bacteria_r[rownames(bacteria_r) %in% geo_Fen$SampleID,
colnames(bacteria_r) %in% geo_Fen$SampleID,]
} else {
mat <- distance_func(bacteria_r, geo_Fen, x)
}
return(mat)
})
names(matrix_list) <- c('soil_t', 'depth', 'C:N_ratio',
'precipitation')
mantel_stats <- tibble(Geochemistry = character(), Mantel_stat = numeric(), p_value = numeric(), pval.adj = numeric(), .rows = 0)
for(i in 1:length(matrix_list)){
mat <- as.data.frame(matrix_list[i])
colnames(mat) <- str_remove(colnames(mat), '.*\\.')
mantel_result <- mantel_fun(bacteria_r, mat)
temp <- tibble(Geochemistry = names(matrix_list)[i], Mantel_stat = mantel_result$statistic,
p_value = mantel_result$signif)
mantel_stats <- rbind(mantel_stats, temp)
}
mantel_stats$pval.adj <- p.adjust(mantel_stats$p_value, method = 'bonferroni')
data_plot_Fen_bacteria <- mantel_stats %>%
mutate(Habitat = 'Fen',
Type = 'Microbial \u03B2NTI')
mantel_stats_Palsa_all <- mantel_stats_Palsa_all %>%
mutate( Habitat = "Palsa") %>%
mutate(Type = 'Metabolite \u03B2NTI')
mantel_stats_bog_all <- mantel_stats_bog_all %>%
mutate( Habitat = "Bog") %>%
mutate(Type = 'Metabolite \u03B2NTI')
mantel_stats_fen_all <- mantel_stats_fen_all %>%
mutate( Habitat = "Fen") %>%
mutate(Type = 'Metabolite \u03B2NTI')
data_plot <- rbind(mantel_stats_Palsa_all, mantel_stats_bog_all, mantel_stats_fen_all,
data_plot_Palsa_bacteria, data_plot_Bog_bacteria,
data_plot_Fen_bacteria) %>%
mutate(Signif = case_when(pval.adj <= 0.0001 ~ '****',
pval.adj <= 0.001 ~  '***',
pval.adj <= 0.01 ~    '**',
pval.adj <= 0.05 ~ '*')) %>%
mutate(Habitat = factor(Habitat, levels = c('Palsa', 'Bog', 'Fen'))) %>%
rbind(list('microbial_bNTI', NA, NA, NA, 'Microbial \u03B2NTI', 'Palsa', NA)) %>%
rbind(list('microbial_bNTI', NA, NA, NA, 'Microbial \u03B2NTI', 'Bog', NA)) %>%
rbind(list('microbial_bNTI', NA, NA, NA, 'Microbial \u03B2NTI', 'Fen', NA))
mantel_heatmap <- data_plot %>%
mutate(Geochemistry = case_when(Geochemistry == 'soil_t' ~ 'Soil temperature',
Geochemistry == 'depth' ~ 'Depth',
Geochemistry == 'microbial_bNTI' ~ 'Microbial \u03B2NTI',
Geochemistry == 'C:N_ratio' ~ 'C:N ratio',
Geochemistry == 'precipitation' ~ 'Precipitation',
TRUE ~ Geochemistry),
Geochemistry = factor(Geochemistry, levels = c('Depth',
'Soil temperature',
'C:N ratio',
'Precipitation',
'Microbial \u03B2NTI'))) %>%
ggplot(aes(x = Type, y = Geochemistry, fill = Mantel_stat))+
geom_tile(color = "white")+
scale_fill_distiller(palette = 'RdBu',
limits = c(-0.55, 0.55), na.value = 'gray80')+
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
geom_text(aes(label = Signif))+
labs(fill = 'Mantel \nStatistic')+
theme(plot.title = element_text(face="bold", hjust = 0.5),
strip.text = element_text(face = "bold", color = "white"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_blank()) +
facet_wrap(~Habitat)
mantel_heatmap
# Changing facet strips colors
fills <- list_colors[c('Palsa', 'Bog', 'Fen')]
g <- ggplot_gtable(ggplot_build(mantel_heatmap))
stripr <- which(grepl('strip-t', g$layout$name))
k <- 1
for (i in stripr) {
j <- which(grepl('rect', g$grobs[[i]]$grobs[[1]]$childrenOrder))
g$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill <- fills[k]
k <- k+1
}
dev.off()
grid.draw(g)
t2 <- as_ggplot(g)
partial_1 <- ggarrange(bp_group_vio_bacteria, bp_group_vio_so,
labels = "AUTO")
partial_1
partial_2 <- ggarrange(depth_den, month_den, common.legend = TRUE, legend = "bottom",
labels = c("C", "D"))
partial_2
partial_3 <- ggarrange(partial_1, partial_2,
ncol = 1)
partial_3
partial_4 <- ggarrange(eco_proc_final, t2,
ncol = 1,
labels = c("E", "F"))
partial_4
final_fig1 <- ggarrange(partial_3, partial_4)
final_fig1
ggsave('output/Figure1_final.png', final_fig1, dpi = 300, height = 8, width = 15)
getwd()
ggsave('output/Figure1_final.png', final_fig1, dpi = 300, height = 8, width = 15)
ggsave('output/Figure_1_final.png', final_fig1, dpi = 300, height = 8, width = 15)
library(igraph)
library(patchwork)
library(ggnewscale)
library(rstatix)
library(ggpubr)
library(ggraph)
library(colourvalues)
library(tidygraph)
library(tidyverse)
habitat <- c('Bog', 'Fen', 'Palsa')
micro_cor_files <- list.files(path = 'output/',
pattern = 'sig_corr_taxa',
recursive = TRUE,
full.names = TRUE)
names(micro_cor_files) <- habitat
habitat <- c('Bog', 'Fen', 'Palsa')
micro_cor_files <- list.files(path = 'output/',
pattern = 'sig_corr_taxa',
recursive = TRUE,
full.names = TRUE)
names(micro_cor_files) <- habitat
micro_cor_files <- list.files(path = '../Metabolite_clusters/output/',
pattern = 'sig_corr_taxa',
recursive = TRUE,
full.names = TRUE)
getwd()
micro_cor_files <- list.files(path = '../Metabolite_clusters/output',
pattern = 'sig_corr_taxa',
recursive = TRUE,
full.names = TRUE)
micro_cor_files <- list.files(path = '../Metabolite_clusters/output/',
pattern = 'sig_corr_taxa',
recursive = TRUE,
full.names = TRUE)
list.files('../Metabolite_clusters/output/')
micro_cor_files <- list.files(path = '../Metabolite_clusters/output/',
#pattern = 'sig_corr_taxa',
recursive = TRUE,
full.names = TRUE)
getwd()
getwd()
getwd()
micro_cor_files <- list.files(path = '../Metabolite_clusters/output/',
pattern = 'sig_corr_taxa',
recursive = TRUE,
full.names = TRUE)
library(igraph)
library(patchwork)
library(ggnewscale)
library(rstatix)
library(ggpubr)
library(ggraph)
library(colourvalues)
library(tidygraph)
library(tidyverse)
habitat <- c('Bog', 'Fen', 'Palsa')
getwd()
micro_cor_files <- list.files(path = '../Metabolite_clusters/output/',
pattern = 'sig_corr_taxa',
recursive = TRUE,
full.names = TRUE)
names(micro_cor_files) <- habitat
micro_cor <- map(micro_cor_files, function(x){
df <- read_csv(x) %>%
rename(to = Microbe,
pval_adj = p_adj)
})
gas_cor_files <- list.files(path = '../Metabolite_clusters/output/',
pattern = 'gas_correlations',
recursive = TRUE,
full.names = TRUE)
names(gas_cor_files) <- habitat
gas_cor <- map(gas_cor_files, function(x){
df <- read_csv(x) %>%
rename(to = env_variable)
})
env_cor_files <- list.files(path = '../Metabolite_clusters/output/',
pattern = 'env_correlations',
recursive = TRUE,
full.names = TRUE)
names(env_cor_files) <- habitat
env_cor <- map(env_cor_files, function(x){
df <- read_csv(x) %>%
rename(to = env_variable)
})
micro_bnti_files <- list.files(path = '../Metabolite_clusters/output/',
pattern = 'feature_microbe_tax',
recursive = TRUE,
full.names = TRUE)
names(micro_bnti_files) <- habitat
micro_bnti_files <- list.files(path = '../Assembly_feature_level_microbiome/output/',
pattern = 'feature_microbe_tax',
recursive = TRUE,
full.names = TRUE)
names(micro_bnti_files) <- habitat
micro_bnti <- map(micro_bnti_files, function(x){
df <- read_csv(x) %>%
filter(Direction != 'Insignificant')
})
micro_bnti <- map(micro_bnti_files, function(x){
df <- read_csv(x) %>%
filter(Direction != 'Insignificant')
})
micro_bnti_for_filt <- map(micro_bnti_files, function(x){
df <- read_csv(x)
})
micro_bnti_files <- list.files(path = '../Assembly_feature_level_microbiome/output/',
pattern = 'feature_microbe_tax',
recursive = TRUE,
full.names = TRUE)
names(micro_bnti_files) <- habitat
micro_bnti <- map(micro_bnti_files, function(x){
df <- read_csv(x) %>%
filter(Direction != 'Insignificant')
})
micro_bnti_for_filt <- map(micro_bnti_files, function(x){
df <- read_csv(x)
})
bnti_counts_files <- list.files(path = '../Metabolite_clusters/output/',
pattern = 'rep_features',
recursive = TRUE,
full.names = TRUE)
bnti_counts_files <- bnti_counts_files[str_detect(bnti_counts_files, 'bnti', negate = TRUE)]
names(bnti_counts_files) <- habitat
bnti_counts <- imap(bnti_counts_files, function(x, y){
df <- read_csv(x) %>%
group_by(cluster, Direction) %>%
count() %>%
group_by(cluster) %>%
mutate(perc = n/sum(n) * 100,
Habitat = y)
})
micro_cor_filt <- map2(micro_cor, micro_bnti_for_filt, function(x, y){
df <- x %>%
filter(to %in% y$Member)
})
micro_cor_sel <- map(micro_cor_filt, function(df){
df %>%
select(cluster, to, rho, pvalue, pval_adj)
})
taxa <- do.call(rbind, micro_cor_filt) %>%
select(to, Phylum) %>%
distinct()
taxa_list <- taxa %>%
pull(Phylum) %>%
unique() %>%
str_remove(., 'p__')
phyl_colors <- set_names(ggpubr::get_palette('jco', length(sort(taxa_list))),
nm = sort(taxa_list))
habitat_colors <- c('Palsa' = '#703C1B', 'Bog' = '#058000', 'Fen' = '#0001FF')
contrib_colors <- set_names(ggpubr::get_palette(palette = 'RdYlBu', 5),
nm = c('Sig. High', 'High', 'Insignificant', 'Low', 'Sig. Low'))
network_graph <- pmap(
list(micro_cor_sel, gas_cor, env_cor, bnti_counts, micro_bnti),
function(micro, gas, env, bnti, m_bnti){
edges <- rbind(micro, gas, env) %>%
filter(pval_adj < 0.05) %>%
rename(from = cluster) %>%
mutate(arho = abs(rho),
width = .5 + ((arho - min(arho))*(4-.5))/(max(arho) - min(arho)),
color = color_values(rho, palette = 'blue2red'))
nodes <- tibble(Name = c(unique(edges$to),
unique(edges$from))) %>%
left_join(taxa, by = c('Name' = 'to')) %>%
mutate(type = case_when(Name %in% edges$from ~ 'Met. Cluster',
Name %in% micro$to ~ 'Bacteria',
Name %in% gas$to ~ 'Env. Factor',
Name %in% env$to ~ 'Env. Factor'),
type = factor(type, levels = c('Met. Cluster', 'Bacteria', 'Env. Factor')),
# shape = case_when(type == 'cluster' ~ 'pie',
#                   Name %in% m_bnti$Member ~ 'star',
#                   type == 'micro' ~ 'circle',
#                   TRUE ~ 'square'),
Phylum = case_when(type == 'Bacteria' ~ str_remove(Phylum, 'p__')),
Phylum = factor(Phylum, levels = str_remove(sort(names(phyl_colors)), 'p__')),
Other_nodes = case_when(type == 'Met. Cluster' ~ 'Met. Cluster',
type == 'Env. Factor' ~ 'Env. Factor'),
Other_nodes = factor(Other_nodes, levels = c('Met. Cluster', 'Env. Factor')),
size = case_when(type == 'Met. Cluster' ~ 6,
type == 'Bacteria' ~ 4,
TRUE ~ 6),
label = ifelse(type == 'Bacteria', NA, Name),
label = str_replace(label, 'Precipitation_3day_accumulation_mm', 'Precipitation'),
label = str_replace(label, 'DepthAvg__', 'Depth'),
label = str_replace(label, 'T, soil \\(C\\)', 'T. soil'))
g <- graph_from_data_frame(edges, vertices = nodes, directed = FALSE)
nodes <- nodes %>%
rename(id = Name)
return(list(nodes = nodes,
edges = edges,
graph = g))
}
)
gg_network <- imap(network_graph, function(x, y){
gg <- tbl_graph(nodes = x$nodes, edges = x$edges, node_key = 'id')
ggraph(gg, layout = 'fr') +
geom_edge_arc(strength = .1,
aes(edge_color = rho,
edge_width = arho)) +
scale_edge_color_distiller(palette = 'RdBu', limits = c(-.7, .7)) +
scale_edge_width(range = c(0.5, 1)) +
guides(edge_width = 'none') +
geom_node_point(aes(color = Phylum,
shape = type),
size = 4) +
scale_color_manual(values = phyl_colors, na.value = 'transparent', drop = FALSE) +
scale_shape_manual(values = c('Met. Cluster' = 15, 'Bacteria' = 16, 'Env. Factor' = 17), drop = FALSE) +
new_scale_color() +
geom_node_point(aes(color = Other_nodes,
shape = type),
size = 6, show.legend = FALSE) +
guides(shape = guide_legend(override.aes = list(color = c('black', 'black', 'forestgreen'),
fill = c('black', 'black', 'forestgreen')))) +
scale_color_manual(values = c('Met. Cluster' = 'black', 'Env. Factor' = 'forestgreen'),
na.value = 'transparent', drop = FALSE) +
geom_node_label(aes(label = label), hjust = 'inward', nudge_y = -0.5, repel = TRUE) +
labs(title = y,
shape = 'Node\nType',
edge_color = "Spearman's\nrho") +
theme_void() +
theme(legend.position = 'bottom',
panel.border = element_rect(color = 'black', fill = NA),
plot.title = element_text(face = 'bold', hjust = 0.5))
})
gg_network_final <- (gg_network$Palsa | gg_network$Bog | gg_network$Fen ) +
plot_layout(guides = 'collect') &
theme(legend.position = 'bottom')
gg_network_final
rep_df <- imap(bnti_counts_files, function(x, y){
df <- read_csv(x) %>%
mutate(Habitat = y)
})
rep_df_final <- reduce(rep_df, rbind) %>%
mutate(cluster = paste0('Cluster', cluster),
Habitat = factor(Habitat, levels = c('Palsa', 'Bog', 'Fen')))
idx_stat <- rep_df_final %>%
select(Habitat, cluster, NOSC, AI_Mod, DBE_O) %>%
pivot_longer(!c(Habitat, cluster), names_to = 'index', values_to = 'value') %>%
group_by(Habitat, index) %>%
wilcox_test(value ~ cluster) %>%
add_xy_position(scales = 'free', step.increase = .5)
idx_plot <- rep_df_final %>%
select(Habitat, cluster, NOSC, AI_Mod, DBE_O) %>%
pivot_longer(!c(Habitat, cluster), names_to = 'index', values_to = 'value') %>%
ggplot(aes(x = cluster,
y = value,
fill = Habitat)) +
geom_violin(alpha = 0.5) +
geom_boxplot(width = 0.1) +
facet_grid(cols = vars(Habitat),
rows = vars(index),
scales = 'free',
space = 'free_x') +
scale_fill_manual(values = habitat_colors) +
stat_pvalue_manual(data = idx_stat, label = 'p.adj.signif', hide.ns = TRUE) +
theme_bw() +
theme(strip.text.y = element_text(angle = 0),
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = 'none')
idx_plot
bnti_counts_df <- reduce(bnti_counts, rbind)
contrib_plot <- bnti_counts_df %>%
mutate(cluster = paste0('Cluster', cluster),
Direction = factor(Direction,
levels = c('Sig. High', 'High', 'Insignificant', 'Low', 'Sig. Low')),
Habitat = factor(Habitat, levels = c('Palsa', 'Bog', 'Fen'))) %>%
ggplot() +
geom_col(aes(x = cluster,
y = perc,
fill = Direction),
color = 'black') +
facet_grid(cols = vars(Habitat),
scales = 'free',
space = 'free_x') +
labs(fill = 'Feature Contribution') +
scale_y_continuous(labels = ~ scales::percent(.x, scale = 1)) +
scale_fill_manual(values = contrib_colors, drop = FALSE) +
theme_bw() +
theme(axis.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
contrib_plot
class_plot <- rep_df_final %>%
group_by(cluster, Habitat) %>%
count(El_comp) %>%
mutate(perc = n / sum(n)) %>%
ggplot() +
geom_col(aes(x = cluster,
y = perc,
fill = El_comp),
color = 'black') +
facet_grid(cols = vars(Habitat),
scales = 'free',
space = 'free_x') +
labs(fill = 'Elemental Composition') +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = ggpubr::get_palette(palette = 'Set3', 10)) +
theme_bw() +
theme(axis.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
class_plot
figure_2 <- (gg_network_final/ (idx_plot | (contrib_plot / class_plot))) +
plot_annotation(tag_levels = list(c('A', '', '', 'B', 'C', 'D'))) &
theme(plot.tag = element_text(size = 20))
figure_2
