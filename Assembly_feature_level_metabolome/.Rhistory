getwd()
meta <-  read_csv("../Assembly_feature_level_metabolome/input/metadata_updated.csv") %>%
filter(!Sampletype == "porewater")
### Load in necessary libraries
require(Rfast) # For faster variant of finding column minimum
require(dplyr) # For left joining
library(picante) # For match.phylo.data
require(phytools) # For midpoint.root
library(tidyverse)
tree <- read.tree('../Assembly_Metabolome/output/Abisko_Weighted_All-Trans_UPGMA.tre')
meta <-  read_csv("../Assembly_feature_level_metabolome/input/metadata_updated.csv") %>%
filter(!Sampletype == "porewater")
e
meta <-  read_csv("../Assembly_Metabolome/input/metadata_updated.csv") %>%
filter(!Sampletype == "porewater")
data <- read.csv('../Assembly_Metabolome/output/Processed_Abisko_Data.csv', row.names = 1)
# If not abundance weighted, setting data to presence/absence
if(abund.weig == F){
data[data > 0] = 1
}
Sample_Name = "bNTI_feat_TWCD_within_palsa" # Input sample name
Factor = "Habitat"
Level = "Palsa"
# Switches for script behaviors
rm.conspec = F # Remove conspecifics
abund.weig = F # Weight values by relative abundances
noise = T # This adds "noise" to the nulls to ensure 0's don't exist in the null
range = 1:999 # Setting replicate numbers (I don't recommend more than 99 at the moment, time-consuming)
# If not abundance weighted, setting data to presence/absence
if(abund.weig == F){
data[data > 0] = 1
}
meta_palsa <- meta %>%
filter(Habitat == "Palsa")
palsa_matrix <- data[,colnames(data) %in% meta_palsa$SampleID]
palsa_matrix <- palsa_matrix[rowSums(palsa_matrix) > 0,]
data <- palsa_matrix
meta <- meta_palsa
check_df <- data.frame(data = rownames(t(data)), meta$SampleID)
head(check_df)
### Matching data and rooting tree
# tree = midpoint.root(tree) # Rooting the tree for consistent results
phylo = match.phylo.data(tree, data) # Matching ICR dataset to the tree
data = t(phylo$data)
tree = phylo$phy
rm("phylo")
# Storing dimensions
samp.num = dim(data)[1]
mem.num = dim(data)[2]
### Load in necessary libraries
require(Rfast) # For faster variant of finding column minimum
require(dplyr) # For left joining
library(picante) # For match.phylo.data
require(phytools) # For midpoint.root
library(tidyverse)
### Load in necessary libraries
require(Rfast) # For faster variant of finding column minimum
require(dplyr) # For left joining
library(picante) # For match.phylo.data
require(phytools) # For midpoint.root
library(tidyverse)
getwd()
